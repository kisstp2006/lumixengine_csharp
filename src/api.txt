CSHARP_FUNCTION(AnimationModule, getControllerInputIndex, nostatic, AnimController, component);
CSHARP_FUNCTION(AnimationModule, setControllerInput, nostatic, AnimController, component);

//navigation
CSHARP_FUNCTION(NavigationModule, cancelNavigation, nostatic, NavmeshAgent, component);
CSHARP_FUNCTION(NavigationModule, navigate, nostatic, NavmeshAgent, component);
CSHARP_FUNCTION_PROPERTY(NavigationModule, getAgentSpeed, nostatic, NavmeshAgent, component,Speed);
CSHARP_FUNCTION(NavigationModule, isNavmeshReady, nostatic, NavigationModule, class);

//entity
CSHARP_FUNCTION_PROPERTY(World, getFirstEntity, nostatic, Entity, partial,FirstEntity);
CSHARP_FUNCTION_PROPERTY(World, getNextEntity, nostatic, Entity, partial,NextEntity);
CSHARP_FUNCTION(World, getEntityName, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setEntityName, nostatic, Entity, partial);
CSHARP_FUNCTION_PROPERTY(World, isDescendant, nostatic, Entity, partial,IsDescent);
CSHARP_FUNCTION(World, getParent, nostatic, Entity, partial);
CSHARP_FUNCTION_PROPERTY(World, getFirstChild, nostatic, Entity, partial,FirstChild);
CSHARP_FUNCTION_PROPERTY(World, getNextSibling, nostatic, Entity, partial,NextSibling);
CSHARP_FUNCTION(World, getLocalTransform, nostatic, Entity, partial);
CSHARP_FUNCTION_PROPERTY(World, getLocalScale, nostatic, Entity, partial,LocalScale);
CSHARP_FUNCTION(World, setParent, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setLocalPosition, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setLocalRotation, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setLocalTransform, nostatic, Entity, partial);
CSHARP_FUNCTION(World, computeLocalTransform, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setMatrix, nostatic, Entity, partial);
CSHARP_FUNCTION_PROPERTY(World, getPositionAndRotation, nostatic, Entity, partial,PositionAndRoatation);
CSHARP_FUNCTION(World, getMatrix, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setTransform, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setTransformKeepChildren, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getTransform, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setRotation, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setPosition, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setScale, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getScale, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getPosition, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getRotation, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getName, nostatic, Entity, partial);
CSHARP_FUNCTION(World, setName, nostatic, Entity, partial);
CSHARP_FUNCTION(World, getModule, nostatic, Entity, partial);

//world
CSHARP_FUNCTION(World, getEntityByName, nostatic, World, partial);
CSHARP_FUNCTION(World, instantiatePrefab, nostatic, World, partial);

//audio
CSHARP_FUNCTION(AudioModule, setEcho, nostatic, AudioModule, class);
CSHARP_FUNCTION(AudioModule, play, nostatic, AudioModule, class);
CSHARP_FUNCTION(AudioModule, stop, nostatic, AudioModule, class);
CSHARP_FUNCTION(AudioModule, setVolume, nostatic, AudioModule, class);

CSHARP_FUNCTION(InputSystem, isMouseDown, static, Input, partial);
CSHARP_FUNCTION(InputSystem, getActionValue, static, Input, partial);
CSHARP_FUNCTION_PROPERTY(InputSystem, getMouseXMove, static, Input, partial,MouseXMove);
CSHARP_FUNCTION_PROPERTY(InputSystem, getMouseYMove, static, Input, partial,MouseYMove);
CSHARP_FUNCTION_PROPERTY(InputSystem, getMousePos, static, Input, partial,MousePos);
CSHARP_FUNCTION(InputSystem, addAction, static, Input, partial);

CSHARP_FUNCTION(PhysicsModule, raycast, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, raycastEx, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, getCollisionLayerName, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, setCollisionLayerName, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, canLayersCollide, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, setLayersCanCollide, nostatic, PhysicsModule, class);
CSHARP_FUNCTION_PROPERTY(PhysicsModule, getCollisionsLayersCount, nostatic, PhysicsModule, class, CollisionsLayersCount);
CSHARP_FUNCTION(PhysicsModule, addCollisionLayer, nostatic, PhysicsModule, class);
CSHARP_FUNCTION(PhysicsModule, removeCollisionLayer, nostatic, PhysicsModule, class);
//physical controller
CSHARP_FUNCTION(PhysicsModule, moveController, nostatic, PhysicalController, component);

//mesh rigid actor
CSHARP_FUNCTION(Renderer, makeScreenshot, static, Renderer, class);
CSHARP_FUNCTION_PROPERTY(Renderer, isOpenGL, static, Renderer, class,IsOpenGL);
CSHARP_FUNCTION_PROPERTY(Renderer, getLayersCount, static, Renderer, class,LayersCount);
CSHARP_FUNCTION(Renderer, getLayer, static, Renderer, class);
CSHARP_FUNCTION(Renderer, getLayerName, static, Renderer, class);
CSHARP_FUNCTION(RenderModule, addDebugTriangle, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugPoint, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCone, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugLine, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCross, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCube, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCubeSolid, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCircle, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugSphere, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugFrustum, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCapsule, nostatic, RenderModule, class);
CSHARP_FUNCTION(RenderModule, addDebugCylinder, nostatic, RenderModule, class);

CSHARP_FUNCTION_PROPERTY(AnimationModule, getControllerEntity, nostatic, AnimController, component,ControllerEntity);

//engine
CSHARP_FUNCTION(Engine, getResourceManager, nostatic, Engine, partial);
//ResourceManager
CSHARP_FUNCTION(ResourceManager, get, nostatic, ResourceManager, class);
//prefab
CSHARP_FUNCTION(PrefabResource, unload, nostatic, PrefabResource, class);
//ResourceManagerBase
CSHARP_FUNCTION(ResourceManagerBase, enableUnload, nostatic, ResourceManagerBase, class);
CSHARP_FUNCTION(ResourceManagerBase, load, nostatic, ResourceManagerBase, class);
CSHARP_FUNCTION(ResourceManagerBase, removeUnreferenced, nostatic, ResourceManagerBase, class);
CSHARP_FUNCTION(ResourceManagerBase, unload, nostatic, ResourceManagerBase, class);
CSHARP_FUNCTION(ResourceManagerBase, reload, nostatic, ResourceManagerBase, class);

//resource
CSHARP_FUNCTION_PROPERTY(Resource, getState, nostatic, Resource, partial,CurrentState);
CSHARP_FUNCTION_PROPERTY(Resource, isEmpty, nostatic, Resource, partial,IsEmpty);
CSHARP_FUNCTION_PROPERTY(Resource, isReady, nostatic, Resource, partial,IsReady);
CSHARP_FUNCTION_PROPERTY(Resource, isFailure, nostatic, Resource, partial,IsFailure);
CSHARP_FUNCTION_PROPERTY(Resource, getRefCount, nostatic, Resource, partial,RefCount);
CSHARP_FUNCTION_PROPERTY(Resource, size, nostatic, Resource, partial,Size);
CSHARP_FUNCTION_PROPERTY(Resource, getPath, nostatic, Resource, partial,Path);
CSHARP_FUNCTION_PROPERTY(Resource, getResourceManager, nostatic, Resource, partial,ResourceManager);

//RigidActor
CSHARP_FUNCTION(PhysicsModule, applyForceToActor, nostatic, RigidActor, component);
CSHARP_FUNCTION_PROPERTY(PhysicsModule, getActorSpeed, nostatic, RigidActor, component, ActorSpeed);
CSHARP_FUNCTION(PhysicsModule, putToSleep, nostatic, RigidActor, component);

CSHARP_RESOURCE(Animation, "animation");
CSHARP_RESOURCE(Clip, "clip");
CSHARP_RESOURCE(ControllerResource, "anim_controller");
CSHARP_RESOURCE(Material, "material");
CSHARP_RESOURCE(Model, "model");
CSHARP_RESOURCE(PhysicsGeometry, "physics");
CSHARP_RESOURCE(PrefabResource, "prefab");
CSHARP_RESOURCE(Shader, "shader");
CSHARP_RESOURCE(Texture, "texture");
